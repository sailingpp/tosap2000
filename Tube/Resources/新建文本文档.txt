#region sap2000过程
            //dimension variables
            #region 定义变量1
            SAP2000v15.SapObject mySapObject;

            SAP2000v15.cSapModel mySapModel;

            int ret;

            int i;

            double[] ModValue;

            double[] PointLoadValue;//集中荷载

            bool[] Restraint;//定义约束

            string[] FrameName;//框架编号

            string[] PointName;//节点点编号
            #endregion

            #region 定义变量2

            int NumberResults;

            string[] Obj;

            string[] Elm;

            string[] LoadCase;

            string[] StepType;

            double[] StepNum;

            double[] U1;

            double[] U2;

            double[] U3;

            double[] R1;

            double[] R2;

            double[] R3;

            double[] SapResult;

            double[] IndResult;

            double[] PercentDiff;

            string[] SapResultString;

            string[] IndResultString;

            string[] PercentDiffString;

            string msg;
            #endregion

            #region 定义中间变量
            string temp_string1;//定义中间变量

            string temp_string2;//定义中间变量

            bool temp_bool;//定义中间变量
            #endregion

            #region 初始化sap2000模型
            //create Sap2000 object

            mySapObject = new SAP2000v15.SapObject();//创建一个sap2000模型

            //start Sap2000 application开启应用程序

            temp_bool = true;

            mySapObject.ApplicationStart(SAP2000v15.eUnits.kN_m_C, temp_bool, "");//创建一个新的模型

            //create SapModel object

            mySapModel = mySapObject.SapModel;

            //initialize model

            ret = mySapModel.InitializeNewModel((SAP2000v15.eUnits.kN_m_C));//初始化模型

            //create new blank model

            ret = mySapModel.File.NewBlank();//创建新的空模型
            #endregion

            #region 定义材料属性
            //define material property 创建材料属性

            ret = mySapModel.PropMaterial.SetMaterial("CONC", SAP2000v15.eMatType.MATERIAL_CONCRETE, -1, "", "");

            //assign isotropic mechanical properties to material

            ret = mySapModel.PropMaterial.SetMPIsotropic("CONC", 3600, 0.2, 0.0000055, 0);
            #endregion

            #region 定义截面属性
            //define rectangular frame section property 定义截面属性

            ret = mySapModel.PropFrame.SetRectangle("b1x" + tube.WallThick, "CONC", tube.WallThick, 1, -1, "", "");
            ret = mySapModel.PropFrame.SetRectangle("b1x" + tube.MiddelWallThick, "CONC", tube.MiddelWallThick, 1, -1, "", "");
            ret = mySapModel.PropFrame.SetRectangle("b1x" + tube.TopThick, "CONC", tube.TopThick, 1, -1, "", "");
            ret = mySapModel.PropFrame.SetRectangle("b1x" + tube.BotThick, "CONC", tube.BotThick, 1, -1, "", "");

            //define frame section property modifiers定义截面修正

            ModValue = new double[8];

            for (i = 0; i <= 7; i++) { ModValue[i] = 1; }

            ModValue[0] = 1000;

            ModValue[1] = 0;

            ModValue[2] = 0;

            double[] temp_SystemArray = ModValue;

            ret = mySapModel.PropFrame.SetModifiers("b1x" + tube.WallThick, ref temp_SystemArray);

            //switch to k-ft units 切换单位

            ret = mySapModel.SetPresentUnits(SAP2000v15.eUnits.kN_m_C);
            #endregion
          
            #region//add frame object by coordinates 按坐标添加构件

            FrameName = new string[7];//新建7个构件的编号名

            temp_string1 = FrameName[0];

            temp_string2 = FrameName[0];

            ret = mySapModel.FrameObj.AddByCoord(0, 0, 0, 0, 0, tube.Height, ref temp_string1, "b1x" + tube.WallThick, "1", "Global");

            FrameName[0] = temp_string1;

            ret = mySapModel.FrameObj.AddByCoord(tube.LeftLength, 0, 0, tube.LeftLength, 0, tube.Height, ref temp_string1, "b1x" + tube.MiddelWallThick, "2", "Global");

            FrameName[1] = temp_string1;

            ret = mySapModel.FrameObj.AddByCoord(tube.LeftLength + tube.RightLength, 0, 0, tube.LeftLength + tube.RightLength, 0, tube.Height, ref temp_string1, "b1x" + tube.WallThick, "3", "Global");

            FrameName[2] = temp_string1;

            ret = mySapModel.FrameObj.AddByCoord(0, 0, tube.Height, tube.LeftLength, 0, tube.Height, ref temp_string1, "b1x" + tube.TopThick, "4", "Global");

            FrameName[3] = temp_string1;

            ret = mySapModel.FrameObj.AddByCoord(0, 0, 0, tube.LeftLength, 0, 0, ref temp_string1, "b1x" + tube.BotThick, "5", "Global");

            FrameName[4] = temp_string1;

            ret = mySapModel.FrameObj.AddByCoord(tube.LeftLength, 0, 0, tube.LeftLength + tube.RightLength, 0, 0, ref temp_string1, "b1x" + tube.BotThick, "6", "Global");

            FrameName[5] = temp_string1;

            ret = mySapModel.FrameObj.AddByCoord(tube.LeftLength, 0, tube.Height, tube.LeftLength + tube.RightLength, 0, tube.Height, ref temp_string1, "b1x" + tube.TopThick, "7", "Global");

            FrameName[6] = temp_string1;
            #endregion

            #region //设置边界条件
            //assign point object restraint at base 设置底部的固定约束

            PointName = new string[6];

            Restraint = new bool[6];
            //限制U1,U2,U3
            for (i = 0; i <= 2; i++) { Restraint[i] = true; }
            //限制R1,R2,R3
            for (i = 3; i <= 5; i++) { Restraint[i] = true; }

            bool[] temp_SystemArray1 = Restraint;

            ret = mySapModel.FrameObj.GetPoints(FrameName[0], ref temp_string1, ref temp_string2);
            PointName[0] = temp_string1;
            PointName[1] = temp_string2;
            ret = mySapModel.PointObj.SetRestraint(PointName[0], ref temp_SystemArray1, 0);

            ret = mySapModel.FrameObj.GetPoints(FrameName[1], ref temp_string1, ref temp_string2);
            PointName[2] = temp_string1;
            PointName[3] = temp_string2;
            ret = mySapModel.PointObj.SetRestraint(PointName[2], ref temp_SystemArray1, 0);

            ret = mySapModel.FrameObj.GetPoints(FrameName[2], ref temp_string1, ref temp_string2);//设置3号构件的底点固接
            PointName[4] = temp_string1;
            PointName[5] = temp_string2;
            ret = mySapModel.PointObj.SetRestraint(PointName[4], ref temp_SystemArray1, 0);

            //assign point object restraint at top 设置顶部的铰接约束

            for (i = 0; i <= 2; i++) { Restraint[i] = true; }

            for (i = 3; i <= 5; i++) { Restraint[i] = false; }

            bool[] temp_SystemArray2 = Restraint;

            ret = mySapModel.FrameObj.GetPoints(FrameName[0], ref temp_string1, ref temp_string2);
            PointName[0] = temp_string1;
            PointName[1] = temp_string2;
            ret = mySapModel.PointObj.SetRestraint(PointName[1], ref temp_SystemArray2, 0);

            ret = mySapModel.FrameObj.GetPoints(FrameName[1], ref temp_string1, ref temp_string2);
            PointName[2] = temp_string1;
            PointName[3] = temp_string2;
            ret = mySapModel.PointObj.SetRestraint(PointName[3], ref temp_SystemArray2, 0);

            ret = mySapModel.FrameObj.GetPoints(FrameName[2], ref temp_string1, ref temp_string2);//设置3号构件的顶点铰接
            PointName[4] = temp_string1;
            PointName[5] = temp_string2;
            ret = mySapModel.PointObj.SetRestraint(PointName[5], ref temp_SystemArray2, 0);
            #endregion

            #region //设置自动框架细分及指定拉压弹簧
            double[] vec = new double[] { 0, 0, 1 };
            for (int f = 0; f < 7; f++)
            {
                ret = mySapModel.FrameObj.SetAutoMesh(FrameName[f], true, true, true, 10, 0.1, 0);
            }
            //设置线弹簧 参数4： 1是拉压弹簧，2是受压弹簧，3是受拉弹簧
            //设置线弹簧 参数7： 弹簧的方向
            ret = mySapModel.FrameObj.SetSpring(FrameName[0], 1, 1, 2, "Simple", 1, 2, 0, ref  vec, 0, true, "Local", 0);
            ret = mySapModel.FrameObj.SetSpring(FrameName[2], 1, 1, 2, "Simple", 1, -2, 0, ref  vec, 0, true, "Local", 0);
            ret = mySapModel.FrameObj.SetSpring(FrameName[4], 1, 1, 2, "Simple", 1, 2, 0, ref  vec, 0, true, "Local", 0);
            ret = mySapModel.FrameObj.SetSpring(FrameName[5], 1, 1, 2, "Simple", 1, 2, 0, ref  vec, 0, true, "Local", 0);
            #endregion
            
            //refresh view, update (initialize) zoom 刷新界面

            temp_bool = false;

            ret = mySapModel.View.RefreshView(0, temp_bool);

            #region 添加荷载模式
            //add load patterns 添加荷载模式

            temp_bool = true;

            ret = mySapModel.LoadPatterns.Add("Vel", SAP2000v15.eLoadPatternType.LTYPE_OTHER, 0, temp_bool);

            ret = mySapModel.LoadPatterns.Add("Soil", SAP2000v15.eLoadPatternType.LTYPE_OTHER, 0, temp_bool);

            ret = mySapModel.LoadPatterns.Add("Water", SAP2000v15.eLoadPatternType.LTYPE_OTHER, 0, temp_bool);
            #endregion

            //assign loading for load pattern 2
            #region//设置均布荷载
            //ret = mySapModel.PointObj.SetLoadForce(PointName[0], "2", ref PointLoadValue, false, "Global", 0);指定线荷载

            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[0], "Vel", 1, 2, 0, 1, tube.VelWallBotLoad, tube.VelWallTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[2], "Vel", 1, 2, 0, 1, -tube.VelWallBotLoad, -tube.VelWallTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[3], "Vel", 1, 2, 0, 1, -tube.VelPlateTopLoad, -tube.VelPlateTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[6], "Vel", 1, 2, 0, 1, -tube.VelPlateTopLoad, -tube.VelPlateTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[0], "Soil", 1, 2, 0, 1, tube.SoilWallBotLoad, tube.SoilWallTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[2], "Soil", 1, 2, 0, 1, -tube.SoilWallBotLoad, -tube.SoilWallTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[3], "Soil", 1, 2, 0, 1, -tube.SoilPlateTop, -tube.SoilPlateTop, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[6], "Soil", 1, 2, 0, 1, -tube.SoilPlateTop, -tube.SoilPlateTop, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[0], "Water", 1, 2, 0, 1, tube.WaterWallBotLoad, tube.WaterWallTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[2], "Water", 1, 2, 0, 1, -tube.WaterWallBotLoad, -tube.WaterWallTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[3], "Water", 1, 2, 0, 1, -tube.WaterPlateTopLoad, -tube.WaterPlateTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[6], "Water", 1, 2, 0, 1, -tube.WaterPlateTopLoad, -tube.WaterPlateTopLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[4], "Water", 1, 2, 0, 1, tube.WaterPlateBotLoad, tube.WaterPlateBotLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[5], "Water", 1, 2, 0, 1, tube.WaterPlateBotLoad, tube.WaterPlateBotLoad, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            #endregion

            #region //设置集中荷载
            //ret = mySapModel.FrameObj.GetPoints(FrameName[2], ref temp_string1, ref temp_string2);

            //PointName[0] = temp_string1;

            //PointName[1] = temp_string2;

            //PointLoadValue = new double[6];

            //PointLoadValue[2] = -10;

            // temp_SystemArray1 = PointLoadValue;

            //assign loading for load pattern 3

            //ret = mySapModel.FrameObj.GetPoints(FrameName[2], ref temp_string1, ref temp_string2);

            //PointName[0] = temp_string1;

            //PointName[1] = temp_string2;

            //PointLoadValue = new double[6];

            //PointLoadValue[2] = -17.2;

            //PointLoadValue[4] = -54.4;

            // temp_SystemArray1 = PointLoadValue;

            //ret = mySapModel.PointObj.SetLoadForce(PointName[1], "3", ref PointLoadValue, false, "Global", 0);

            //assign loading for load pattern 4

            //ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[1], "4", 1, 11, 0, 1, 2, 2, "Global", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);

            //assign loading for load pattern 5

            //ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[0], "5", 1, 2, 0, 1, 2, 2, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);

            //ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[1], "5", 1, 2, 0, 1, -2, -2, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);

            //assign loading for load pattern 6

            //ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[0], "6", 1, 2, 0, 1, 0.9984, 0.3744, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);

            //ret = mySapModel.FrameObj.SetLoadDistributed(FrameName[1], "6", 1, 2, 0, 1, -0.3744, 0, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);

            //assign loading for load pattern 7

            //ret = mySapModel.FrameObj.SetLoadPoint(FrameName[1], "7", 1, 2, 0.5, -15, "Local", System.Convert.ToBoolean(-1), System.Convert.ToBoolean(-1), 0);
            #endregion
        
            //switch to k-in units 转换单位

            ret = mySapModel.SetPresentUnits(SAP2000v15.eUnits.kN_m_C);

            //save model

            ret = mySapModel.File.Save(@path);
            MessageBox.Show("输出成功");
            #region 分析模块
            //run model (this will create the analysis model)

            ret = mySapModel.Analyze.RunAnalysis();

            //initialize for Sap2000 results 初始化sap2000模型结果

            //SapResult = new double[7];

            //ret = mySapModel.FrameObj.GetPoints(FrameName[1], ref temp_string1, ref temp_string2);

            //PointName[0] = temp_string1;

            //PointName[1] = temp_string2;

            ////get Sap2000 results for load patterns 1 through 7

            //NumberResults = 0;

            //Obj = new string[1];

            //Elm = new string[1];

            //LoadCase = new string[1];

            //StepType = new string[1];

            //StepNum = new double[1];

            //U1 = new double[1];

            //U2 = new double[1];

            //U3 = new double[1];

            //R1 = new double[1];

            //R2 = new double[1];

            //R3 = new double[1];

            //for (i = 0; i <= 6; i++)
            //{

            //    ret = mySapModel.Results.Setup.DeselectAllCasesAndCombosForOutput();

            //    ret = mySapModel.Results.Setup.SetCaseSelectedForOutput(System.Convert.ToString(i + 1), System.Convert.ToBoolean(-1));

            //    if (i <= 3)
            //    {

            //        string[] temp_SystemArray20 = Obj;

            //        string[] temp_SystemArray3 = Elm;

            //        string[] temp_SystemArray4 = LoadCase;

            //        string[] temp_SystemArray5 = StepType;

            //        double[] temp_SystemArray6 = StepNum;

            //        double[] temp_SystemArray7 = U1;

            //        double[] temp_SystemArray8 = U2;

            //        double[] temp_SystemArray9 = U3;

            //        double[] temp_SystemArray10 = R1;

            //        double[] temp_SystemArray11 = R2;

            //        double[] temp_SystemArray12 = R3;

            //        ret = mySapModel.Results.JointDispl(PointName[1], SAP2000v15.eItemTypeElm.ObjectElm, ref NumberResults, ref temp_SystemArray20, ref temp_SystemArray3, ref temp_SystemArray4, ref temp_SystemArray5, ref temp_SystemArray6, ref temp_SystemArray7, ref temp_SystemArray8, ref temp_SystemArray9, ref temp_SystemArray10, ref temp_SystemArray11, ref temp_SystemArray12);

            //        temp_SystemArray9.CopyTo(U3, 0);

            //        SapResult[i] = U3[0];

            //    }

            //    else
            //    {

            //        string[] temp_SystemArray20 = Obj;

            //        string[] temp_SystemArray3 = Elm;

            //        string[] temp_SystemArray4 = LoadCase;

            //        string[] temp_SystemArray5 = StepType;

            //        double[] temp_SystemArray6 = StepNum;

            //        double[] temp_SystemArray7 = U1;

            //        double[] temp_SystemArray8 = U2;

            //        double[] temp_SystemArray9 = U3;

            //        double[] temp_SystemArray10 = R1;

            //        double[] temp_SystemArray11 = R2;

            //        double[] temp_SystemArray12 = R3;

            //        ret = mySapModel.Results.JointDispl(PointName[0], SAP2000v15.eItemTypeElm.ObjectElm, ref NumberResults, ref temp_SystemArray20, ref temp_SystemArray3, ref temp_SystemArray4, ref temp_SystemArray5, ref temp_SystemArray6, ref temp_SystemArray7, ref temp_SystemArray8, ref temp_SystemArray9, ref temp_SystemArray10, ref temp_SystemArray11, ref temp_SystemArray12);

            //        temp_SystemArray7.CopyTo(U1, 0);

            //        SapResult[i] = U1[0];

            //    }

            //}

            //close Sap2000
            MessageBox.Show("关闭模型");
            mySapObject.ApplicationExit(false);

            mySapModel = null;

            mySapObject = null;

            //fill Sap2000 result strings



            //SapResultString = new string[7];

            //for (i = 0; i <= 6; i++)
            //{

            //    SapResultString[i] = string.Format("{0:0.00000}", SapResult[i]);

            //    ret = (string.Compare(SapResultString[i], 1, "-", 1, 1, true));

            //    if (ret != 0)
            //    {

            //        SapResultString[i] = " " + SapResultString[i];

            //    }

            //}

            //fill independent results

            //IndResult = new double[7];

            //IndResultString = new string[7];

            //IndResult[0] = -0.02639;

            //IndResult[1] = 0.06296;

            //IndResult[2] = 0.06296;

            //IndResult[3] = -0.2963;

            //IndResult[4] = 0.3125;

            //IndResult[5] = 0.11556;

            //IndResult[6] = 0.00651;

            //for (i = 0; i <= 6; i++)
            //{

            //    IndResultString[i] = string.Format("{0:0.00000}", IndResult[i]);

            //    ret = (string.Compare(IndResultString[i], 1, "-", 1, 1, true));

            //    if (ret != 0)
            //    {

            //        IndResultString[i] = " " + IndResultString[i];

            //    }
            //}

            //fill percent difference

            //PercentDiff = new double[7];

            //PercentDiffString = new string[7];

            //for (i = 0; i <= 6; i++)
            //{

            //    PercentDiff[i] = (SapResult[i] / IndResult[i]) - 1;

            //    PercentDiffString[i] = string.Format("{0:0%}", PercentDiff[i]);

            //    ret = (string.Compare(PercentDiffString[i], 1, "-", 1, 1, true));

            //    if (ret != 0)
            //    {

            //        PercentDiffString[i] = " " + PercentDiffString[i];

            //    }

            //}

            ////display message box comparing results

            //msg = "";

            //msg = msg + "LC  Sap2000  Independent  %Diff\r\n";

            //for (i = 0; i <= 5; i++)
            //{

            //    msg = msg + string.Format("{0:0}", i + 1) + "    " + SapResultString[i] + "   " + IndResultString[i] + "       " + PercentDiffString[i] + "\r\n";

            //}

            //msg = msg + string.Format("{0:0}", i + 1) + "    " + SapResultString[i] + "   " + IndResultString[i] + "       " + PercentDiffString[i];
            //MessageBox.Show(msg);
            #endregion

            #endregion